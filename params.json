{"name":"Riak Scala Client","tagline":"A fast, non-blocking Scala Riak client library based on Akka and Spray","body":"\r\n## What is this?\r\n\r\nA fast, non-blocking idiomatic Scala client library for interacting with [Riak].\r\n\r\n\r\n## Design goals\r\n\r\n- It should be non-blocking (i.e. all calls are handled asynchronously and result in Futures)\r\n- It should not wrap the java client for Riak, since that only exposes a blocking API\r\n- It should provide an idiomatic Scala client API without resorting to hard to learn DSLs\r\n- It should integrate with Akka (using an Akka extension)\r\n- It should be easy to use\r\n\r\nThe initial focus is on supporting the Riak HTTP API. Protobuf support might be added\r\nlater but it has a low priority at the moment.\r\n\r\n\r\n## Current Status: Preparing for public release\r\n\r\nA first public release to the Sonatype/Central repositories is scheduled for February 2013.\r\n\r\nThis project was started in December 2012 out of frustration about the ack of non-blocking\r\nScala (or Java) client libraries for [Riak]. It is still under construction.\r\n\r\nSo far, the following Riak (http) API features are supported:\r\n\r\n- Fetch\r\n- Store\r\n- Delete\r\n- Customizable and strongly typed conflict resolution on all fetches (and stores when returnbody=true)\r\n- Automatic (de)serialization of Scala (case) classes using type classes\r\n- Secondary Indexes (2i)\r\n    - Fetching exact matches\r\n    - Fetching ranges\r\n    - Automatic indexing of Scala (case) classes using type classes\r\n- An untyped RiakValue class for interacting with raw Riak values and their associated meta data (vlock, etag, content type, last modified time, indexes, etc.)\r\n- A typed RiakMeta[T] class for interacting with deserialized values while retaining their associated meta data (vlock, etag, content type, last modified time, indexes, etc.)\r\n- Auto-retry of fetches and stores (a standard feature of the underlying spray-client library)\r\n\r\nThese Riak features are currently missing and/or under construction:\r\n\r\n- link walking\r\n- Map Reduce\r\n\r\n\r\n## Design and Implementation\r\n\r\nThe _riak-scala-client_ is based on [Akka] 2.1 and and [Spray] client 1.1.\r\n\r\nThe client is implemented as an Akka extension, making it very easy to use\r\nfrom Akka-based applications and non-Akka applications alike.\r\n\r\n\r\n## Why such a boring name?\r\n\r\nIt seems all the cool names (scalariak, riakka, riaktor, etc.) have been taken already.\r\nIf you come up with a cooler name, please let us know and eternal fame will be yours!\r\n\r\n\r\n## License\r\n\r\nThe _riak-scala-client_ is licensed under [APL 2.0].\r\n\r\n  [Riak]:     http://basho.com/riak/\r\n  [Akka]:     http://akka.io/\r\n  [Spray]:    http://spray.io/\r\n  [APL 2.0]:  http://www.apache.org/licenses/LICENSE-2.0\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}